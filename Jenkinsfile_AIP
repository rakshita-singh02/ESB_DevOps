def propfile
pipeline {
	agent {
    		kubernetes {
			label 'SpringBootRestApp'
			defaultContainer 'jnlp'
			yaml """
apiVersion: v1
kind: Pod
metadata:
labels:
  component: ci
spec:
  containers:
  - name: gradle
    image: gradle:3.5-jdk8-alpine
    command:
    - cat
    tty: true
"""
		}
	}
	environment {
		GRADLE_PATH = '/opt/gradle/gradle-3.5.1/bin'
		GRADLE_TASK = 'ESBAuditClient ESBAuditLog ESBErrorTranslator TaxESB FraudESB FulfillmentESB PaymentESB ESBRadial ESBAutomatedQueueRetry AlertESB OrderReconESB'
		DEPLOYMENT_ARCHIVE_DIR='/home/muleadmin/stage/archive'
		DEPLOYMENT_STAGE_DIR='/home/muleadmin/stage'
		DEPLOYMENT_DIR='/opt/mule/latest/webapps'
		WAR_FILES='AlertESB.war FraudESB.war TaxESB.war PaymentESB.war FulfillmentESB.war ESBAuditLog.war ESBAutomatedQueueRetry.war OrderReconESB.war'
		ESB_BIN_PATH='/opt/mule/bin/esb_service'
		ESB_WAR_FOLDERS='PaymentESB ESBAuditLog OrderReconESB FraudESB TaxESB FulfillmentESB AlertESB ESBAutomatedQueueRetry'
		REQUESTID='779'
		STAGE_NAME='dev3'
		WORKSOFT_URI='http://pwwsftapp01/executionmanager/api'
		USERNAME='devopsengineering@signetjewelers.com'
		USERNAME_FEATURE_DEPLOY='muleadmin'
		HOSTS_FEATURE_DEPLOY="10.6.74.90"
		USERNAME_DEV_DEPLOY='muleadmin'
		HOSTS_DEV_DEPLOY="10.6.74.91, 10.6.74.92"
		USERNAME_RELEASE='muleadmin'
		HOSTS_RELEASE_DEPLOY="10.6.74.93, 10.6.74.94"
	}
	stages {
		stage('Build & Unit Test') {
			steps {
				container('gradle') {
					script {
						withMaven(maven: 'MAVEN-3.6.3') {
							echo 'I am executing build and unit test'
							echo "Use the line below when we switch to the actual repo"
							// sh 'for i in ESBAuditClient ESBAuditLog ESBErrorTranslator TaxESB FraudESB FulfillmentESB PaymentESB ESBRadial ESBAutomatedQueueRetry AlertESB OrderReconESB;do gradle --no-daemon -p ${i} clean build;done'
							echo "Remove the line below when we switch to the actual repo"
							sh 'mvn -f sample-java-app/pom.xml clean package'
							propfile = readProperties(file: './project.properties')	
							if (propfile['javadoc'] == "true") {
								sh 'mvn javadoc:aggregate'
							}
							if (propfile['jacoco'] == "true") {
								jacoco( 
									execPattern: '**/*.exec',
									classPattern: '**/*.class',
									sourcePattern: '**/*.java',
									exclusionPattern: '**/test*'
								)
							}
						}	
					}
				}
			}
		}
		/* stage('Code Quality') {
			steps {
				container('gradle') {
					withMaven(maven: 'MAVEN-3.6.3') {
						withSonarQubeEnv(installationName: 'Sonarqube') {
						echo 'I am executing code quality using sonarqube'
						echo ' Update the line below when we switch to actual ESB repo'	
						// sh './gradle Sonarqube'
						echo ' Remove the line below after we switch to ESB repo'
						sh 'mvn -f sample-java-app/pom.xml -Dsonar.projectName=ESB_${BRANCH_NAME} -Dsonar.projectKey=ESB_sample  sonar:sonar'
					       }
						 sleep(60)
						timeout(time: 1, unit: 'MINUTES') {
						waitForQualityGate abortPipeline: true
						} 
					}
				}
			}
		} */
		stage("Publish Package") {
			when { expression {env.GIT_BRANCH == 'origin/dev' || env.GIT_BRANCH == 'origin/release'|| propfile['feature_deploy'] == "true" }}
			steps {
				container('gradle') {
					script {
							withMaven(maven: 'MAVEN-3.6.3') {
							echo 'I am pushing the artifact with unique name showing the branch from which it is generated, to Archiva'
							echo 'Replace the next 4 lines to reflect the ESB artifact and push it to archiva'
							echo 'Use the 5 lines below when we switch to the actual ESB repo'
							/* echo 'copying the jar and war files from the individual target directorrys and copying it to artifacts directory '
							sh "mkdir -p $WORKSPACE/artifacts"
							sh 'for i in ESBAuditClient ESBAuditLog ESBErrorTranslator TaxESB FraudESB FulfillmentESB PaymentESB ESBRadial ESBAutomatedQueueRetry AlertESB   OrderReconESB;do cp -rp ${i}/dist/libs/* $WORKSPACE/artifacts/ ;done' 
							echo 'create a tar file on the Jenkins server'
							sh "cd $WORKSPACE/artifacts/ && tar -cvzf artifact.tar * && md5sum artifact.tar archiveArtifacts artifacts: 'artifacts/*.tar', fingerprint: true 
							*/
							echo 'Remove the below 3 lines after switching to the actual ESB repo'
							sh 'cd sample-java-app/target/'
							sh 'mv sample-0.0.1-SNAPSHOT.jar.original sample-build_${BUILD_NUMBER}-branch_${BRANCH_NAME}.jar'
							sh 'ls -lrt sample-java-app/target/'
							sh 'cat /$WORKSPACE/sample-java-app/pom.xml'
							sh 'mvn -X deploy:deploy-file  -Dfile=/$WORKSPACE/sample-java-app/target/sample-build_${BUILD_NUMBER}-branch_${BRANCH_NAME}.jar -DpomFile=/$WORKSPACE/sample-java-app/pom.xml -DrepositoryId=snapshots -Durl=https://archiva.sgn.devops.accentureanalytics.com/repository/snapshots/'	
							echo "Archiva successfully pushed"
						}
					}
				}
			}
		}
		
	

	}
		
	post {
  		always {
			script {
				if (propfile['javadoc'] == "true") {
					javadoc(javadocDir: "/$WORKSPACE/target/site/apidocs", keepAll: true)
				}
		  	}
	  	}
    		failure {
			/*mail bcc: '', 
			 body: "<b>Example</b><br>\n<br>Project: ${env.JOB_NAME} <br>Build Number: ${env.BUILD_NUMBER} <br> URL de build: ${env.BUILD_URL}", 
			 cc: '', 
			 charset: 'UTF-8', 
			 from: '', 
			 mimeType: 'text/html', 
			 replyTo: '', 
			 subject: "ERROR CI: Project name -> ${env.JOB_NAME}", 
			 to: "foo@foomail.com";*/
			echo 'I am sending a notification with failure'
    		}
	  	success {
		  	echo 'I am sending a notification with success'
	  	}
  	}
}
